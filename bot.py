import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("database.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS deals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    buyer_id INTEGER,
    seller_id INTEGER,
    amount REAL,
    status TEXT
)''')

conn.commit()

def get_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

def update_balance(user_id, amount):
    cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET balance = balance + ?",
                   (user_id, amount, amount))
    conn.commit()

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

@dp.message_handler(commands=["balance"])
async def show_balance(msg: types.Message):
    balance = get_balance(msg.from_user.id)
    await msg.reply(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

@dp.message_handler(commands=["topup"])
async def topup(msg: types.Message):
    await msg.reply(
        "üîê –û—Ç–ø—Ä–∞–≤—å—Ç–µ TON/USDT –≤—Ä—É—á–Ω—É—é –Ω–∞ –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).\n"
        "üí¨ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å."
    )


@dp.message_handler(lambda msg: msg.text.replace('.', '', 1).isdigit())
async def confirm_topup(msg: types.Message):
    amount = float(msg.text)
    update_balance(msg.from_user.id, amount)
    await msg.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USDT.")

@dp.message_handler(commands=["deal"])
async def create_deal(msg: types.Message):
    await msg.reply(
await msg.reply(
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–±–µ–∑ @) –∏ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
    "`sellerusername 25.5`",
    parse_mode="Markdown"
)

@dp.message_handler(lambda msg: len(msg.text.split()) == 2)
async def process_deal(msg: types.Message):
    try:
        seller_username, amount = msg.text.split()
        amount = float(amount)
        buyer_id = msg.from_user.id
        seller_id = abs(hash(seller_username)) % 100000000

        if get_balance(buyer_id) < amount:
            await msg.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        update_balance(buyer_id, -amount)
        cursor.execute("INSERT INTO deals (buyer_id, seller_id, amount, status) VALUES (?, ?, ?, 'hold')",
                       (buyer_id, seller_id, amount))
        conn.commit()
        await msg.reply("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ ‚Äî —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥—É—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü—É. –ù–∞–ø–∏—à–∏—Ç–µ /confirm")

    except:
        await msg.reply("‚ö† –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: sellerusername 10.5")

@dp.message_handler(commands=["confirm"])
async def confirm_deal(msg: types.Message):
    buyer_id = msg.from_user.id
    cursor.execute("SELECT id, seller_id, amount FROM deals WHERE buyer_id = ? AND status = 'hold'", (buyer_id,))
    deal = cursor.fetchone()

    if not deal:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏.")
        return

    deal_id, seller_id, amount = deal
    update_balance(seller_id, amount)
    cursor.execute("UPDATE deals SET status = 'completed' WHERE id = ?", (deal_id,))
    conn.commit()
    await msg.reply("‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.")

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)

